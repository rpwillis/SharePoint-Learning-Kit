

                                     SharePoint Learning Kit
                                        Source Code Guide



INTRODUCTION

This ReadMe.txt file provides an overview of the source code for SharePoint Learning Kit (SLK),
and instructions for building and debugging SLK.

Most of these instructions apply to the SLK application, i.e. the SharePoint "solution" (packaged
as SharePointLearningKit.wsp) which adds e-learning funcionality to SharePoint.  The SLK
redistributables and source code also includes Microsoft Learning Components (MLC), a set of
managed-code assemblies (DLLs) and reusable ASP.NET source code (the "MLC Session Frameset") that
allow you to add e-learning capabilities to your applications.  The method for debugging those
applications will vary based on the type of application (Web application, Windows Forms
application, etc.)

These instructions are targeted to developers who will be building the SLK source code.  These
instructions assume the reader is already familiar with installing and using SLK as a user,
and has read through at least the introductory topics in the the SLK SDK documentation set
(see Documentation.htm).  If you're only interested in using the SLK SDK, that documentation
should be sufficient -- the file you're now reading is specifically for those interested in
building and debugging the SLK application.



PREREQUISITES

To build and debug SLK, you'll need the following installed on your development computer:
  -- Microsoft Visual Studio 2008
  -- Microsoft SQL Server 2005
  -- Windows SharePoint Services 3.0

To build the SLK SDK documentation set (optional), you'll need the following:
  -- CodeDoc, available from www.dwell.net

You don't need to install SLK on your computer, but doing so won't hurt.



CONTENTS OF THIS DIRECTORY TREE

This file (ReadMe.txt) is at the root of the SLK source code directory tree.  This directory tree
is designed to be unzipped in the location C:\dev\SLK -- so that the path of the file you are now
reading should be C:\dev\SLK\ReadMe.txt -- and this documentation will make that assumption.  In
fact, you may be able to build and debug SLK in other locations, but this is the configuration
that's received the most testing, and is therefore recommended.

This directory tree contains the following directories:

  -- ApiRef: File used in the SLK SDK documentation -- see "BUILDING SLK SDK DOCUMENTATION".

  -- ApiRefSrc: Files related to ApiRef but not included in the SLK SDK documentation set.

  -- Doc: Various documents included in various SLK distribution packages.

  -- Samples: MLC sample code.

  -- Slk: Source code for the SLK application.  Contains these subdirectories:
       -- Admin: SLK administration Web page (appears in SharePoint Central Administration).
       -- AdminFeature: SharePoint "feature" .xml files for SLK administration features.
       -- App: SLK application Web pages.
       -- AppFeature: SharePoint "feature" .xml files for SLK application features.
       -- Dll: Source code for Microsoft.SharePointLearningKit.dll.
       -- Samples: SLK application sample code.
       -- slkadm: Source code for the slkadm.exe command-line utility.
       -- Solution: Build scripts for building SharePointLearningKit.wsp.

  -- Src: Source code for MLC (Microsoft Learning Components).  Contains these subdirectories:
       -- Compression: Source code for Microsoft.LearningComponents.Compression.dll and Microsoft.LearningComponents.MRCI.dll
       -- LearningComponents: Source code for Microsoft.LearningComponents.dll.
       -- Schema: Build scripts that compile the MLC LearningStore schema.
       -- SchemaCompiler: Source code for SchemaCompiler.exe.
       -- Shared: Source files shared among subdirectories of Src.
       -- SharePoint: Source code for Microsoft.LearningComponents.SharePoint.dll.
       -- Storage: Source code for Microsoft.LearningComponents.Storage.dll.

  -- Tools: Various build tools.  Tools\Src contains source code for some of these tools.

When you build SLK, you'll get additional directories, such as Debug, Drop, SdkDoc, Slk\Debug,
Slk\SlkSdk, etc.  These directories, along with all other files and directories generated by the
build process, can be deleted by running "fmake cleanall" in a Visual Studio 2008 Command Prompt
in directory C:\dev\SLK.



BUILDING SLK

To build SLK, you first need to do some one-time configuration (if not done already):

  -- Install Visual Studio 2008.

  -- Install Windows SharePoint Services 3.0.  These instructions, and the build scripts in SLK,
     assume SharePoint is installed in the following location:

         C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\12

  -- Install Microsoft SQL Server 2005.  These steps assume SQL Server is installed on the same
     computer you're developing on; you can modify the instructions if SQL Server is on a different
     computer.


Once the one-time configuration above has been done, here's how you build (or rebuild) SLK from the
source code:

  1. Run a Visual Studio 2008 Command Prompt.  Do the following steps in that command prompt.

  2. CD to C:\dev\SLK.  Run the following command:

         nmake TARGET_ARCH=<1|0>
     
     Specify TARGET_ARCH=1 if building for the 64-bit platform and TARGET_ARCH=0 if building for 
     the Win32 platform

     fmake is a SLK tool ("filtered make") which runs nmake (a Visual Studio tool), which executes
     the steps in "makefile".  The makefile is essentially a build script: it will cause all the
     Visual Studio projects in SLK to be built.  Why not just have a single Visual Studio solution
     that builds all the projects?  Because the makefile (and other makefiles that it calls into)
     perform additional steps; for example, it copies some files that are shared between
     C:\dev\SLK\Samples\BasicWebPlayer and C:\dev\SLK\Slk\Dll.

     When fmake completes, you should get output like this:

         __________ Error Summary __________

                      No Errors
         ___________________________________

     At this point, you have a complete build.  Specifically:

       -- The compiled versions (Debug and Release) of each of SLK's DLLs should exist within the
          bin subdirectory of each project.  Here are the Debug file locations:

              C:\dev\SLK\Src\LearningComponents\bin\Debug\Microsoft.LearningComponents.dll
              C:\dev\SLK\Src\Storage\bin\Debug\Microsoft.LearningComponents.Storage.dll
              C:\dev\SLK\Src\SharePoint\bin\Debug\Microsoft.LearningComponents.SharePoint.dll
              C:\dev\SLK\Slk\Dll\bin\Debug\Microsoft.SharePointLearningKit.dll

       -- SharePointLearningKit.dll has been copied to the global assembly cache.

       -- Other executables have been built (Debug file locations):

              C:\dev\SLK\Src\SchemaCompiler\bin\Debug\SchemaCompiler.exe
              C:\dev\SLK\Slk\slkadm\bin\Debug\slkadm.exe

       -- Sample code has been built.

       -- The MLC LearningStore schema, located here:

              C:\dev\SLK\Src\SchemaCompiler\BaseSchema.xml

          ...is compiled into the following files:

              C:\dev\SLK\Src\Schema\InitSchema.sql
              C:\dev\SLK\Src\Schema\SchemaDataComponents.cs
              C:\dev\SLK\Src\Schema\SchemaDataStorage.cs

       -- The SLK application LearningStore schema, located here:

              C:\dev\SLK\Slk\SlkSchema.xml

          ...is compiled into the following files:

              C:\dev\SLK\Slk\SlkSchema.sql
              C:\dev\SLK\Slk\SlkUpgrade.sql
              C:\dev\SLK\Slk\Dll\SlkSchema.cs

       -- The SharePoint "solution" file (basically a CAB file that installs into SharePoint)
          has been built into these locations (Debug and Release):

              C:\dev\SLK\Slk\Solution\Debug\SharePointLearningKit.wsp
              C:\dev\SLK\Slk\Solution\Release\SharePointLearningKit.wsp

       -- The SLK Documentation set has been built in the following location.  See "BUILDING SLK
          DOCUMENTATION" for more information.

              C:\dev\SLK\SdkDoc

     Many of these files exist in multiple locations.  The locations above are the original
     locations of each; others are copies made during the build process.

  3. Now you're ready to install your build of the SLK application into SharePoint.

      (a) If this is the first time you've installed the SLK application on this computer,
          follow the instructions in this file:

              C:\dev\SLK\Slk\Solution\ReadMe.txt

      (b) Otherwise, you can do the faster approach: in a Visual Studio 2008 Command Prompt, CD to
          C:\dev\SLK and run the following command:

              prop

          This batch file copies all the SLK assemblies into the global assembly cache, and then
          copies the SLK .aspx files into SharePoint, then resets IIS.

          You should do this step after each full build of SLK.

      (c) If you haven't previously configured SLK, do so using either SharePoint Central
          Administration (go to the Application Management tab, click Configure SharePoint Learning
          Kit, select your Site Collection, then click OK), or using the slkadm.exe command-line
          utility (C:\dev\SLK\Slk\slkadm\bin\Debug\slkadm.exe).

          Note: If you don't see "Configure SharePoint Learning Kit" in SharePoint Central
          Administration, you probably missed step (a) above.

          When you rebuild SLK you generally don't need to do this step again.

At this point SLK should be fully built and configured.



DEBUGGING SLK

After building SLK, you may want to change and debug code.  Here's how you typically debug SLK:

  1. Open c:\dev\SLK\Slk\Dll\SlkDll.sln in Visual Studio.  Make sure it's built.
     Building this solution will cause the built Microsoft.SharePointLearningKit.dll to be
     copied to the global assembly cache.

  2. Run iisreset.exe.  This will cause SharePoint to unload the copy of
     Microsoft.SharePointLearningKit.dll it may have loaded into memory, so that the next time it
     access that assembly it will get the one that was just copied to the global assembly cache.

  3. In a browser, open any page in SharePoint, to get "w3wp.exe" to be loaded into memory.

  4. In Visual Studio, click Debug, Attach to Process, select all w3wp.exe lines you see, and
     click Attach.  (Tip 1: click the Process column header twice to sort by process name,
     descending: w3wp.exe will sort near the top.  Tip 2: if there's only one w3wp.exe shown, you
     can just double-click it to attach to it.)

  5. Set breakpoints as needed.  For example, open AssignmentListWebPart.cs (in the SlkDll project)
     and set a breakpoint at the beginning of the RenderContents method.  Now open a page that
     calls that code (in this example, any page that includes the SLK Assignment List Web Part),
     and the breakpoint should break.  (If it doesn't, do a full clean build, i.e. "fmake cleanall
     all", run Prop.bat, and try again.)

After making a code change -- as long as it's within a .cs file in c:\dev\SLK\Slk\Dll -- you can
debug your change by repeating the steps above.

The instructions above apply to editing and debugging Microsoft.SharePointLearningKit.dll.  If you
need to edit and debug MLC assemblies (Microsoft.LearningComponents.*), you can use the .sln files
in the source code directories of those assemblies.



BUILDING SLK DROP

On CodePlex, SLK releases are packaged into these .zip files:

     SLK-Install-n.n.nnn-ENU.zip
     SLK-SDK-n.n.nnn-ENU.zip
     SLK-SourceCode-n.n.nnn-ENU.zip

...where n.n.nnn is the version number.  You can build directories containing the same structure
as the contents of these .zip files as follows: in a Visual Studio 2008 Command Prompt, CD to
C:\dev\SLK and run the following command:

     fmake drop

The result will be that the following directories contain the same contents as the .zip files
listed above:

     c:\dev\SLK\Drop\Drop\Install
     c:\dev\SLK\Drop\Drop\SDK
     c:\dev\SLK\Drop\Drop\SourceCode



BUILDING SLK SDK DOCUMENTATION

SLK's SDK documentation set is built from C# XML comments throughout the SLK source code, as well as
overview topics in C:\dev\SLK\ApiRef.

If you'd like to build the SLK SDK documentation set, you'll need CodeDoc, a shared-source tool
available from http://www.dwell.net/Downloads/?Project=CodeDoc.  Unzip CodeDoc-xxxx-xx-xx.zip to
your hard disk, then edit C:\dev\SLK\makefile so that the "CODEDOC" variable points to the location
of CodeDoc.exe.  Then, you can build SLK SDK documentation from the command line by running "fmake
sdkdoc" at C:\dev\SLK.  Also, at that point, full builds ("fmake" or "fmake all" from C:\dev\SLK)
will build the documentation set.  The documentation is built to C:\dev\SLK\SdkDoc -- open
Documentation.htm to view it.

If you get documentation compilation errors, the easiest way to find and fix them is to open
C:\dev\SLK\SdkDoc.sln in Visual Studio and build it.  When it's done, open the Output window
and double-click on error messages that include line numbers, and you'll go directly to the line
with the error.

CodeDoc defines custom C# XML documentation tags (e.g. "<pr>" as shorthand for "<paramref>",
"<r>" for references, "<n>" for non-link references, etc.) -- see CodeDoc documentation for more
information (www.dwell.net/CodeDoc).  Also, SLK defines a few of its own C# XML documentation
tags -- see C:\dev\SLK\Tools\Src\XmlDocPreprocessor\Readme.txt for a list.



/* Copyright (c) Microsoft Corporation. All rights reserved. */

