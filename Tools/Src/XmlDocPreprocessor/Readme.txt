/* Copyright (c) Microsoft Corporation. All rights reserved. */


                   XmlDocPreprocessor.exe Usage Information

XmlDocPreprocessor.exe performs some simple preprocessing of XML files
generated by "csc.exe /doc" (extracted from "///" comments in C# files).

To use XmlDocPreprocessor.exe, run it as follows:

    XmlDocPreprocessor <output-dir> <input-xml-file>...

<input-xml-file>... is the name of one or more XML documention files or
patterns (e.g. "C:\Foo\Bar\*.xml").  Each input XML documentation file is
processed, and the result is written to a file of the same name in
<output-dir>.

As an alternative to putting all the arguments on the command line, a
response file containing arguments may be used as follows:

    XmlDocPreprocessor @<response-file>

The following processing occurs on each file:

  -- <Typ>type-name</Typ> is converted to <see cref="T:full-type-name"/>,
     assuming type-name is a type name (i.e. a class, interface, struct, enum,
     or delegate) that's relative to the current namespace.  The generated
     full-type-name is the fully qualified name of type-name, including the
     full namespace; the assumption is that type-name is in the same namespace
     as the enclosing class.  type-name may begin with "../" to make type-name
     relative to the parent of the current namespace, or "../../" to make
     type-name relative to the grandparent of the current namespace, and so on.
     Alternatively, type-name may begin with "/" to make it an absolute path,
     e.g. <Typ>/System.String</Typ>.

     For example, within class Microsoft.Abc.Def, <Typ>Foo</Typ> is converted
     to <see cref="T:Microsoft.Abc.Foo"/>, <Typ>Foo.Bar</Typ> is converted to
     <see cref="T:Microsoft.Abc.Foo.Bar"/>, <Typ>../Foo</Typ> is converted to
     <see cref="T:Microsoft.Foo"/>, <Typ>../Foo</Typ>, and
     <Typ>/System.String</Typ> is converted to <see cref="T:System.String"/>.

  -- <SeeAlsoTyp>type-name</SeeAlsoTyp>:  Like <Type>, but <seealso> is
     generated instead of <see>.

  -- <Nsp>namespace-name</Nsp> is converted to
     <see cref="T:full-namespace-name"/>, similar to <Type>, assuming
     namespace-name refers to a namespace, relative to the current namespace.

  -- <SeeAlsoNsp>namespace-name</SeeAlsoNsp>:  Like <Nsp>, but <seealso> is
     generated instead of <see>.

  -- <Fld>field-name</Fld> is converted to
     <see cref="T:full-field-name"/>, similar to <Type>, assuming
     field-name refers to a field, relative to the current type.

  -- <SeeAlsoFld>field-name</SeeAlsoFld>:  Like <Fld>, but <seealso> is
     generated instead of <see>.

  -- <Prp>property-name</Prp> is converted to
     <see cref="T:full-property-name"/>, similar to <Type>, assuming
     property-name refers to a property (including a indexer or an indexed
     property), relative to the current type.

  -- <SeeAlsoPrp>property-name</SeeAlsoPrp>:  Like <Prp>, but <seealso> is
     generated instead of <see>.

  -- <Mth>method-name</Mth> is converted to
     <see cref="T:full-method-name"/>, similar to <Type>, assuming
     method-name refers to a method (including a constructor, operator, etc.)
     relative to the current type.

  -- <SeeAlsoMth>method-name</SeeAlsoMth>:  Like <Mth>, but <seealso> is
     generated instead of <see>.

  -- <Evt>event-name</Evt> is converted to
     <see cref="T:full-event-name"/>, similar to <Type>, assuming
     event-name refers to a event, relative to the current type.

  -- <SeeAlsoEvt>event-name</SeeAlsoEvt>:  Like <Evt>, but <seealso> is
     generated instead of <see>.

  -- <P>parameter-name</P> is converted to <paramref name="property-name"/>.

  -- <Img>image-file-name</Img> is converted to a <img> tag (plus appropriate
     related HTML markup) that references image-file-name.

The purpose of these substitutions is
  (a) to improve readability of the XML documentation within C# files, and
  (b) to reduce the number of occurrences of namespace names, in case they
      change later, and
  (c) to avoid requiring that HTML constructs unnecessarily be included within
      XML documentation (e.g. better to do "<Img>Foo.gif</Img>" than
      "<p><img src="Foo.gif"></p>", considering that in the future <p> may
      change or attributes of <img> may be added or the path to images may
      change etc.)

