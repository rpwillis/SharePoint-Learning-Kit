<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttachedFileHtml" xml:space="preserve">
    <value>There is an attached {0} file.</value>
  </data>
  <data name="BrowseHtml" xml:space="preserve">
    <value>Browse...</value>
  </data>
  <data name="ChooseFileToAttachHtml" xml:space="preserve">
    <value>Choose a file to attach:</value>
  </data>
  <data name="CorrectAnswerColonHtml" xml:space="preserve">
    <value>Correct answer:</value>
  </data>
  <data name="CorrectAnswerHtml" xml:space="preserve">
    <value>Correct answer</value>
  </data>
  <data name="CorrectAnswerSeparatorHtml" xml:space="preserve">
    <value> or </value>
    <comment>(space "or" space)</comment>
  </data>
  <data name="DetachFileHtml" xml:space="preserve">
    <value>Detach File</value>
  </data>
  <data name="FileAttachmentNotFound" xml:space="preserve">
    <value>A requested file attachment could not be found.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>A requested file could not be found.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="HeadExecuteViewScript" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\HeadExecuteViewScript;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="HeadGradingViewScript" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\HeadGradingViewScript;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="IncorrectAnswerHtml" xml:space="preserve">
    <value>Incorrect answer</value>
  </data>
  <data name="InstructorCommentsColonHtml" xml:space="preserve">
    <value>Instructor comments:</value>
  </data>
  <data name="InstructorCommentTooLong" xml:space="preserve">
    <value>"The text entered is formatted incorrectly or greater than the maximum {0} characters."</value>
    <comment>Must be a quoted string that can be inserted into a javascript alert(). Displayed in an alert in the random access view for the onblur of an LRM instructor comment when the comment is too long.</comment>
  </data>
  <data name="InvalidFormFieldValue" xml:space="preserve">
    <value>The value, {0}, of the form field, {1}, is invalid.</value>
    <comment>{0} is the posted value and {1} is the name of the form field. Used by  InvalidFormDataException when evaluating posted form data during grading submission.</comment>
  </data>
  <data name="InvalidId" xml:space="preserve">
    <value>The value of the id is invalid in the assessment markup: {0}</value>
    <comment>{0} is the value of the src attribute of the IMG tag.</comment>
  </data>
  <data name="InvalidOptionValue" xml:space="preserve">
    <value>The posted &lt;option&gt; value, {0}, is out of range for the &lt;select&gt; tag with name="{1}".</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>The type attribute has an invalid value in the assessment markup: {0}</value>
    <comment>{0} is the value of the src attribute of the IMG tag.</comment>
  </data>
  <data name="MissingFormField" xml:space="preserve">
    <value>The form field, {0}, is missing.</value>
  </data>
  <data name="NoFileAttachedHtml" xml:space="preserve">
    <value>No file attached.</value>
  </data>
  <data name="NoScoreHtml" xml:space="preserve">
    <value>--</value>
  </data>
  <data name="ReplaceFileHtml" xml:space="preserve">
    <value>Replace the attached file with another file:</value>
  </data>
  <data name="ReviewViewScript" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ReviewViewScript;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="ScoreOutOfRange" xml:space="preserve">
    <value>"The score entered is formatted incorrectly or outside the allowable range of -1000 to 1000."</value>
    <comment>Must be a quoted string that can be inserted into a javascript alert(). This gets shown in grading view when a score is entered that is out of range in an item score slug.</comment>
  </data>
  <data name="StudentNotSelectedHtml" xml:space="preserve">
    <value>Not selected</value>
  </data>
  <data name="StudentNotSelectedIncorrectHtml" xml:space="preserve">
    <value>This is the correct answer but it was not selected</value>
  </data>
  <data name="StudentSelectedCorrectHtml" xml:space="preserve">
    <value>Correct answer</value>
  </data>
  <data name="StudentSelectedHtml" xml:space="preserve">
    <value>Selected</value>
  </data>
  <data name="StudentSelectedIncorrectHtml" xml:space="preserve">
    <value>Incorrect answer</value>
  </data>
  <data name="Unanswered" xml:space="preserve">
    <value>&lt;Unanswered&gt;</value>
  </data>
  <data name="ViewFileHtml" xml:space="preserve">
    <value>View File</value>
  </data>
  <data name="ViewTheAttachedFileHtml" xml:space="preserve">
    <value>View the attached file.</value>
  </data>
</root>